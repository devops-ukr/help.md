{
    "Command": "terraform taint",
    "Usage": "terraform taint [options] name",
    "Options": {
        "indent": 21,
        "data": {
            "-allow-missing": "If specified, the command will succeed (exit code 0) even if the resource is missing.",
            "-backup=path": "Path to backup the existing state file before modifying. Defaults to the \"-state-out\" path with \".backup\" extension. Set to \"-\" to disable backup.",
            "-lock=true": "Lock the state file when locking is supported.",
            "-lock-timeout=0s": "Duration to retry a state lock.",
            "-module=path": "The module path where the resource lives. By default this will be root. Child modules can be specified by names. Ex. \"consul\" or \"consul.vpc\" (nested modules).",
            "-no-color": "If specified, output won't contain any color.",
            "-state=path": "Path to read and save state (unless state-out is specified). Defaults to \"terraform.tfstate\".",
            "-state-out=path": "Path to write updated state file. By default, the \"-state\" path will be used."
        }
    },
    "Description": "Manually mark a resource as tainted, forcing a destroy and recreate\n  on the next plan/apply.\n  This will not modify your infrastructure. This command changes your\n  state to mark a resource as tainted so that during the next plan or\n  apply, that resource will be destroyed and recreated. This command on\n  its own will not modify infrastructure. This command can be undone by\n  reverting the state backup file that is created."
}